const VERSION = "1.0.1";

const assets = [
  "/",
  "/offline.html",
  "/manifest.webmanifest",
  "/1.jpg",
  "/2.jpg",
  "/3.jpg",
  "/4.jpg",
  "/5.jpg",
  "/d1.png",
  "/d2.png",
  "/d3.png",
  "/mascot-192.png",
  "/mascot-512.png",
  "/boy.svg",
  "/es.svg",
  "/finish.svg",
  "/fr.svg",
  "/girl.svg",
  "/heart.svg",
  "/hero.webp",
  "/hr.svg",
  "/it.svg",
  "/jp.svg",
  "/leaderboard.svg",
  "/learn.svg",
  "/man.svg",
  "/mascot_bad.svg",
  "/mascot_sad.svg",
  "/mascot.svg",
  "/points.svg",
  "/quests.svg",
  "/robot.svg",
  "/shop.svg",
  "/unlimited.svg",
  "/woman.svg",
  "/zombie.svg",
  "/correct.wav",
  "/es_boy.mp3",
  "/es_girl.mp3",
  "/es_man.mp3",
  "/es_robot.mp3",
  "/es_woman.mp3",
  "/es_zombie.mp3",
  "/fr_boy.mp3",
  "/fr_girl.mp3",
  "/fr_man.mp3",
  "/fr_robot.mp3",
  "/fr_woman.mp3",
  "/fr_zombie.mp3",
  "/hr_boy.mp3",
  "/hr_girl.mp3",
  "/hr_man.mp3",
  "/hr_robot.mp3",
  "/hr_woman.mp3",
  "/hr_zombie.mp3",
  "/it_boy.mp3",
  "/it_girl.mp3",
  "/it_man.mp3",
  "/it_robot.mp3",
  "/it_woman.mp3",
  "/it_zombie.mp3",
  "/jp_boy.mp3",
  "/jp_girl.mp3",
  "/jp_man.mp3",
  "/jp_robot.mp3",
  "/jp_woman.mp3",
  "/jp_zombie.mp3",
  "/incorrect.wav",
  "/finish.mp3",
  "/og-poster.jpg",
];

const assetsCacheName = "lingo" + VERSION;

self.addEventListener("install", (event) => {
  event.waitUntil(
    (async () => {
      const cache = await caches.open(assetsCacheName);
      await Promise.allSettled(assets.map((url) => cache.add(url)));

      self.skipWaiting();
    })()
  );
});

self.addEventListener("activate", (event) => {
  event.waitUntil(
    (async () => {
      // Remove old caches (assets)
      const keys = await caches.keys();
      await Promise.allSettled(
        keys
          .filter((key) => key !== assetsCacheName)
          .map((key) => caches.delete(key))
      );
      await self.clients.claim();
    })()
  );
});

self.addEventListener("message", (event) => {
  // We want to cache missing assets (if there is any) whenever user loads our app.
  if (event.data?.type === "CACHE-MISSING-ASSETS") {
    (async () => {
      try {
        const cache = await caches.open(assetsCacheName);
        const matches = await Promise.all(
          assets.map((asset) => cache.match(asset))
        );

        const missingAssets = assets.filter((_, i) => !matches[i]);

        if (missingAssets.length) {
          await Promise.allSettled(missingAssets.map((url) => cache.add(url)));
        }
      } catch (err) {
        console.error("Error caching missing assets:", err);
      }
    })();
  }
});

self.addEventListener("fetch", (event) => {
  // we don't want to cache any method beside GET...
  if (event.request.method !== "GET") {
    event.respondWith(networkOnly(event.request));
    return;
  }

  const eventUrl = new URL(event.request.url);

  // Next.js related things... (i don't even know what they are, i just know they ruin my app)
  if (eventUrl.searchParams.has("_rsc")) {
    event.respondWith(networkOnly(event.request));
    return;
  }

  // HTML files, if the requested page is in the cache we respond with it, if not, we respond with the offline page...
  if (
    event.request.mode === "navigate" ||
    event.request.headers.get("accept")?.includes("text/html")
  ) {
    if (eventUrl.pathname === "/") {
      event.respondWith(
        cacheOnly(event.request, assetsCacheName, /*returnOffline= */ true)
      );
      return;
    }

    event.respondWith(
      networkOnly(event.request, null, /*returnOffline= */ true)
    );
    return;
  }

  // static files
  if (eventUrl.host === self.location.host) {
    // static files generated by Next.js
    // (Fonts)
    if (eventUrl.pathname.startsWith("/_next/static/media")) {
      event.respondWith(cacheOnly(event.request, assetsCacheName));
      return;
    }

    // (CSS, JS)
    if (eventUrl.pathname.startsWith("/_next/static")) {
      event.respondWith(staleWhileRevalidate(event.request, assetsCacheName));
      return;
    }

    // images generated by Next.js
    if (eventUrl.pathname.startsWith("/_next/image")) {
      event.respondWith(cacheOnly(event.request, assetsCacheName));
      return;
    }

    // cached files in assets
    if (assets.includes(eventUrl.pathname)) {
      event.respondWith(cacheOnly(event.request, assetsCacheName));
      return;
    }
  }

  // other requests...
  event.respondWith(networkOnly(event.request));
});

async function findCachedData(req, cacheName, returnOffline = false) {
  // if the request was for a html page, we ignore search params...
  const cacheProps = returnOffline ? { ignoreSearch: true } : undefined;
  const cache = await caches.open(cacheName);
  const cachedResponse = await cache.match(req, cacheProps);

  return { cachedResponse, cache };
}

async function cacheOnly(req, cacheName, returnOffline = false) {
  const { cachedResponse, cache } = await findCachedData(
    req,
    cacheName,
    returnOffline
  );

  if (cachedResponse) {
    return cachedResponse.clone();
  }

  return networkOnly(req, cache, returnOffline);
}

async function staleWhileRevalidate(req, cacheName, returnOffline = false) {
  const { cachedResponse, cache } = await findCachedData(
    req,
    cacheName,
    returnOffline
  );
  const fetchRes = await networkOnly(req, cache, returnOffline);

  return cachedResponse || fetchRes;
}

async function networkOnly(req, cache = null, returnOffline = false) {
  return fetch(req)
    .then(async (networkRes) => {
      if (cache && networkRes.ok) await cache.put(req, networkRes.clone());
      return networkRes;
    })
    .catch(async () => {
      if (returnOffline) return offlineHTMLFallback();
      return responseFallback();
    });
}

function responseFallback() {
  return new Response(
    "Network error and no cached data available. see the browser's console for more information",
    {
      status: 503,
      statusText: "Service Unavailable.",
      headers: { "Content-Type": "text/plain" },
    }
  );
}

function offlineHTMLFallback() {
  return new Response(
    `<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"/><meta name="viewport"content="width=device-width,initial-scale=1,maximum-scale=5,viewport-fit=cover"/><link rel="icon" href="/mascot-192.png"/><link rel="apple-touch-icon" href="/mascot-192.png"/><link rel="manifest" href="/manifest.webmanifest"/><meta name="description"content="You're offline, check your internet connection and try again."/><meta name="theme-color"content="#22c55e"/><meta name="color-scheme"content="only light"/><title>You're offline )):</title><style>body{background-color:white;font-family:Arial,Helvetica,sans-serif;display:flex;flex-direction:column;justify-content:center;align-items:center;height:100vh;height:100svh;margin:0;padding:0 1rem;overscroll-behavior:none;user-select:none;-webkit-user-select:none;user-drag:none;-webkit-user-drag:none;touch-callout:none;-webkit-touch-callout:none;}div{display:flex;align-items:center;gap:10px;}button{padding:0.75rem;border-radius:0.75rem;text-transform:uppercase;letter-spacing:0.025em;font-size:0.875rem;line-height:1.25rem;font-weight:700;background-color:#22c55e;color:white;border:none;border-bottom:4px solid #16a34a;border-top:0px solid white;cursor:pointer;transition:color 0.3s ease;margin-top:10px;-webkit-tap-highlight-color:transparent;}button:hover{background-color:#22c55ee6;}button:active{border-bottom-width:0px;border-top-width:4px;}button:focus-visible{border-bottom-width:0px;border-top-width:4px;outline: none;}</style></head><body><div><h1>You're currently <span style="color:#22c55e">offline.</span></h1><svg stroke="black"fill="none"stroke-width="2"viewBox="0 0 24 24" aria-hidden="true"style="min-width:3.5rem;min-height:3.5rem"width="3.5rem"height="3.5rem"xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round"stroke-linejoin="round"d="M18.364 5.636a9 9 0 010 12.728m0 0l-2.829-2.829m2.829 2.829L21 21M15.536 8.464a5 5 0 010 7.072m0 0l-2.829-2.829m-4.243 2.829a4.978 4.978 0 01-1.414-2.83m-1.414 5.658a9 9 0 01-2.167-9.238m7.824 2.167a1 1 0 111.414 1.414m-1.414-1.414L3 3m8.293 8.293l1.414 1.414"></path></svg></div><p>it looks like you're offline, You need to be online, in order to use Lingo.</p><button onclick="window.location.reload()">Reload</button></body></html>`,
    {
      status: 503,
      statusText: "Service Unavailable.",
      headers: { "Content-Type": "text/html" },
    }
  );
}
